package fx.backend.repository;import fx.backend.domain.Orders;import org.springframework.stereotype.Repository;import java.util.*;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.atomic.AtomicLong;@Repositorypublic class MemoryOrderRepository implements OrderRepository {    public static Map<Long, Orders> orderMap = new ConcurrentHashMap<>();    public static AtomicLong sequence = new AtomicLong(0);    @Override    public Orders save(Orders orders) {        orders.setID(sequence.incrementAndGet());        orderMap.put(orders.getID(), orders);        return orders;    }    @Override    public Optional<Orders> findById(Long id) {        return Optional.ofNullable(orderMap.get(id));    }    public Optional<Orders> findByPhoneNumber(String phoneNumber) {        return orderMap.values().stream()                .filter(order -> Objects.equals(order.getPhoneNumber(), phoneNumber))                .findAny();    }    @Override    public List<Orders> findAll() {        return new ArrayList<>(orderMap.values());    }    @Override    public void deleteById(Long orderId) {        orderMap.remove(orderId);    }//    @Override    public Optional<Orders> updateOrder(Long orderId, Orders orders) {        deleteById(orderId);        orderMap.put(orderId, orders);        return Optional.ofNullable(orderMap.get(orderId));    }    public static void clearAll() {        orderMap.clear();        sequence.set(0L);    }}